#ifndef HVL_COMPUTATIONAL_DOMAIN_H
#define HVL_COMPUTATIONAL_DOMAIN_H

#include "voxel_grid.h"
#include "json.h"
#include "interaction_data.h"
#include <vector>
#include <Eigen/Core>
#include <filesystem>
#include <fstream>

using json = nlohmann::json;

/**
 * @brief Class which represents the computational domain.
 *
 * The computational domain is the space in which the simulation is run. It is composed of a set of voxel grids.
 * The domain is defined by a JSON file which specifies the voxel grid NIFTI files, origins, and dimensions.
 * In addition, the JSON file specifies the background material and dimensions of the computational domain.
 */

class ComputationalDomain {
public:
    ComputationalDomain() = default;
    /**
     * @brief Constructor for the ComputationalDomain class.
     *
     * @param json_file_path The path to the JSON file which defines the computational domain.
     * @param is_python_environment True if the simulation is being run in a Python environment, false otherwise.
     */
    explicit ComputationalDomain(const std::string &json_file_path, bool is_python_environment = false);

    /**
     * @brief Returns the interaction data generated by the materials in the computational domain.
     *
     * @return The interaction data generated by the materials in the computational domain.
     */
    InteractionData getInteractionData() const;

    /**
     * @brief Returns true if the position is within the computational domain, false otherwise.
     *
     * @param position The position to check.
     * @return True if the position is within the computational domain, false otherwise.
     */
    bool isInComputationalDomain(const Eigen::Vector3d &position) const;

    /**
     * @brief Returns the voxel at the given position.
     *
     * @param position The position of the voxel.
     * @return The voxel at the given position.
     */
    Voxel& getVoxel(const Eigen::Vector3d &position);

    /**
     * @brief Returns the voxel grid at index N.
     *
     * @param N The index of the voxel grid.
     * @return The voxel grid at index N.
     */
    VoxelGrid& getVoxelGridN(int N);

    /**
     * @brief Returns the origin of the voxel grid at index N.
     *
     * @param N The index of the voxel grid.
     * @return The origin of the voxel grid at index N.
     */
    Eigen::Vector3d getVoxelGridOriginN(int N);

    /**
     * @brief Returns the spatial dimensions of the voxel grid at index N.
     *
     * @param N The index of the voxel grid.
     * @return The dimensions of the voxel grid at index N.
     */
    Eigen::Vector3d getVoxelGridDimSpaceN(int N);

    /**
     * @brief Returns the number of voxel grids in the computational domain.
     *
     * @return The number of voxel grids in the computational domain.
     */
    int getNumVoxelGrids() const;

    /**
     * @brief Voxel which represents the background material.
     */
    Voxel background_voxel;
private:
    std::vector<std::pair<VoxelGrid, Eigen::Vector3d>> voxel_grids_;
    Eigen::Vector3d dim_space_;
    bool is_python_environment_;

    // related private functions


    // initialization

    /**
     * @brief Runs the initialization of the computational domain.
     *
     * @param json_file_path The path to the JSON file which defines the computational domain.
     */
    void initializeCompDomain(const std::string &json_file_path);

    /**
     * @brief Checks if the given file path is a JSON file.
     *
     * @param file_path The file path to check.
     * @return True if the file path is a JSON file, false otherwise.
     */
    static bool isJSON(const std::string &file_path);

    /**
     * @brief Sets the properties of the computational domain.
     *
     * @param json_object The JSON object which defines the computational domain.
     */
    void setCompProperties(const json &json_object);

    /**
     * @brief Sets the voxel grids of the computational domain.
     *
     * @param json_object The JSON object which defines the computational domain.
     * @param json_directory_path The path to the directory containing the JSON file.
     */
    void setVoxelGrids(const json &json_object, const std::string &json_directory_path);

    // initializing interaction data
    /**
     * @brief Returns the names of the materials in the computational domain.
     * @return The names of the materials in the computational domain.
     */
    std::vector<std::string> getMaterialNames() const;

    /**
     * @brief Returns the name of the background material.
     * @return The name of the background material.
     */
    std::string getBackgroundMaterialName() const;

    /**
     * @brief Adds NIFTI file paths to the given vector.
     *
     * @param voxel_grid_json The JSON object which defines the voxel grid.
     * @param json_directory_path The path to the directory containing the JSON file.
     * @param nifti_file_paths The vector to add the NIFTI file paths to.
     */
    static void getNIFTIFilePaths(const json &voxel_grid_json, const std::string &json_directory_path, std::vector<std::string> &nifti_file_paths);

    /**
     * @brief Adds origins of voxel grids to the given vector.
     *
     * @param voxel_grid_json The JSON object which defines the voxel grid.
     * @param origins The vector to add the origins to.
     */
    static void getOrigins(const json &voxel_grid_json, std::vector<Eigen::Vector3d> &origins);

    /**
     * @brief Checks if the given file path is a NIFTI file.
     * @param file_path
     * @return True if the file path is a NIFTI file, false otherwise.
     */
    static bool isNIFTI(const std::string &file_path);
};

#endif //HVL_COMPUTATIONAL_DOMAIN_H
